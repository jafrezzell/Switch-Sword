//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MoveControls"",
            ""id"": ""60425468-b87e-4c8e-a160-10af351175ce"",
            ""actions"": [
                {
                    ""name"": ""MoveKeys"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ca5edb9d-3f41-4190-8b66-7ac4d99043e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""cfd4cecb-429b-4b1e-bfbc-330c04d52411"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e620020-4bc3-4379-801b-bf0c583a5515"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Targetting"",
                    ""type"": ""Button"",
                    ""id"": ""35a6b206-b2de-42f1-aa00-bfe19fcd3462"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TargetSwitch"",
                    ""type"": ""Value"",
                    ""id"": ""3ecf41a0-f3c5-4c3d-a9c9-0cb9d068bf66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""f30ab2c4-db62-48ce-8042-2e291ebb8fc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""680df214-2b2d-42ef-9093-c018d88ee127"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a77d1585-486a-468c-be7e-d63f0cb4d0ad"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.5)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""b7196db1-21f3-4dff-b426-b877a60412f1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""60facd3c-e3e3-4718-804c-6af1b5e73249"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""702c6e43-4502-413b-85a1-733e7bbbffe5"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a5500f79-3944-4ec8-b3c2-6ddd0c208722"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7cf635f8-b8e6-4a1a-804b-6b88f10b5127"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2c830352-b2ff-470a-b2a4-cdd3598b7556"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.4)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6983d93-100d-48ec-b026-0e3f2cdceda0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8912a23-5554-4abe-9560-c61c745f89c6"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bee419c-62ff-4795-85fe-bf95a32182a0"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Targetting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2f62d27-82ab-4374-ba4c-3a9eb5b60d8a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Targetting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a09364d-2d99-4925-8f4c-c5b1958f6340"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.1)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""TargetSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0df2f656-c196-4711-9b77-283792a865f6"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c4f6e45-9c83-463e-9f8b-78e8b3063fa6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MoveControls
        m_MoveControls = asset.FindActionMap("MoveControls", throwIfNotFound: true);
        m_MoveControls_MoveKeys = m_MoveControls.FindAction("MoveKeys", throwIfNotFound: true);
        m_MoveControls_Jump = m_MoveControls.FindAction("Jump", throwIfNotFound: true);
        m_MoveControls_CameraMove = m_MoveControls.FindAction("CameraMove", throwIfNotFound: true);
        m_MoveControls_Targetting = m_MoveControls.FindAction("Targetting", throwIfNotFound: true);
        m_MoveControls_TargetSwitch = m_MoveControls.FindAction("TargetSwitch", throwIfNotFound: true);
        m_MoveControls_Sprint = m_MoveControls.FindAction("Sprint", throwIfNotFound: true);
        m_MoveControls_BasicAttack = m_MoveControls.FindAction("BasicAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveControls
    private readonly InputActionMap m_MoveControls;
    private List<IMoveControlsActions> m_MoveControlsActionsCallbackInterfaces = new List<IMoveControlsActions>();
    private readonly InputAction m_MoveControls_MoveKeys;
    private readonly InputAction m_MoveControls_Jump;
    private readonly InputAction m_MoveControls_CameraMove;
    private readonly InputAction m_MoveControls_Targetting;
    private readonly InputAction m_MoveControls_TargetSwitch;
    private readonly InputAction m_MoveControls_Sprint;
    private readonly InputAction m_MoveControls_BasicAttack;
    public struct MoveControlsActions
    {
        private @PlayerControls m_Wrapper;
        public MoveControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveKeys => m_Wrapper.m_MoveControls_MoveKeys;
        public InputAction @Jump => m_Wrapper.m_MoveControls_Jump;
        public InputAction @CameraMove => m_Wrapper.m_MoveControls_CameraMove;
        public InputAction @Targetting => m_Wrapper.m_MoveControls_Targetting;
        public InputAction @TargetSwitch => m_Wrapper.m_MoveControls_TargetSwitch;
        public InputAction @Sprint => m_Wrapper.m_MoveControls_Sprint;
        public InputAction @BasicAttack => m_Wrapper.m_MoveControls_BasicAttack;
        public InputActionMap Get() { return m_Wrapper.m_MoveControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMoveControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveControlsActionsCallbackInterfaces.Add(instance);
            @MoveKeys.started += instance.OnMoveKeys;
            @MoveKeys.performed += instance.OnMoveKeys;
            @MoveKeys.canceled += instance.OnMoveKeys;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @CameraMove.started += instance.OnCameraMove;
            @CameraMove.performed += instance.OnCameraMove;
            @CameraMove.canceled += instance.OnCameraMove;
            @Targetting.started += instance.OnTargetting;
            @Targetting.performed += instance.OnTargetting;
            @Targetting.canceled += instance.OnTargetting;
            @TargetSwitch.started += instance.OnTargetSwitch;
            @TargetSwitch.performed += instance.OnTargetSwitch;
            @TargetSwitch.canceled += instance.OnTargetSwitch;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @BasicAttack.started += instance.OnBasicAttack;
            @BasicAttack.performed += instance.OnBasicAttack;
            @BasicAttack.canceled += instance.OnBasicAttack;
        }

        private void UnregisterCallbacks(IMoveControlsActions instance)
        {
            @MoveKeys.started -= instance.OnMoveKeys;
            @MoveKeys.performed -= instance.OnMoveKeys;
            @MoveKeys.canceled -= instance.OnMoveKeys;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @CameraMove.started -= instance.OnCameraMove;
            @CameraMove.performed -= instance.OnCameraMove;
            @CameraMove.canceled -= instance.OnCameraMove;
            @Targetting.started -= instance.OnTargetting;
            @Targetting.performed -= instance.OnTargetting;
            @Targetting.canceled -= instance.OnTargetting;
            @TargetSwitch.started -= instance.OnTargetSwitch;
            @TargetSwitch.performed -= instance.OnTargetSwitch;
            @TargetSwitch.canceled -= instance.OnTargetSwitch;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @BasicAttack.started -= instance.OnBasicAttack;
            @BasicAttack.performed -= instance.OnBasicAttack;
            @BasicAttack.canceled -= instance.OnBasicAttack;
        }

        public void RemoveCallbacks(IMoveControlsActions instance)
        {
            if (m_Wrapper.m_MoveControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveControlsActions @MoveControls => new MoveControlsActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMoveControlsActions
    {
        void OnMoveKeys(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCameraMove(InputAction.CallbackContext context);
        void OnTargetting(InputAction.CallbackContext context);
        void OnTargetSwitch(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnBasicAttack(InputAction.CallbackContext context);
    }
}
